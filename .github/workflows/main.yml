name: deploy-flow

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres        
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2.3.4

      - name: Setup Node.js
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14.x

      - name: Install npm dependencies
        run: npm install

      - name: Setup Database
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
          DB_HOST: postgres
        run: |
          echo deb "http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" >> /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
          apt update
          apt install -y postgresql-client-11
          export PGPASSWORD=$POSTGRES_PASSWORD
          psql -h $DB_HOST -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ./database/dump.sql

      - name: Run tests
        env:
          DB_NAME: postgres
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_HOST: postgres
        run: npm run test
      
  build:
    runs-on: ubuntu-latest
    needs: test
    environment: ci
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: devops-infraestructure
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill secrets in ECS task definition
        run: |
          sed -i \
            -e "s|SECRET_DB_HOST|${{ secrets.DB_HOST }}|g" \
            -e "s|SECRET_DB_USERNAME|${{ secrets.DB_USERNAME }}|g" \
            -e "s|SECRET_DB_PASSWORD|${{ secrets.DB_PASSWORD }}|g" \
            -e "s|SECRET_DB_NAME|${{ secrets.DB_NAME }}|g" \
            -e "s|APP_PORT|${{ secrets.APP_PORT }}|g" \
            -e "s|ECR_IMAGE|${{ steps.build-image.outputs.image }}|g" \
            task-definition.json

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: devops-infra-ecs-service
          cluster: devops-infra-cluster
          wait-for-service-stability: true
